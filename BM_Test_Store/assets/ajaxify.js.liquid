/*============================================================================
  (c) Copyright 2015 Shopify Inc. Author: Carson Shold (@cshold). All Rights Reserved.

  Plugin Documentation - http://shopify.github.io/Timber/#ajax-cart

  Ajaxify the add to cart experience and flip the button for inline confirmation,
  show the cart in a modal, or a 3D drawer.

  This file includes:
    - Basic Shopify Ajax API calls
    - Ajaxify cart plugin

  This requires:
    - jQuery 1.8+
    - handlebars.min.js (for cart template)
    - modernizer.min.js
    - snippet/ajax-cart-template.liquid

  JQUERY API (c) Copyright 2009-2015 Shopify Inc. Author: Caroline Schnapp. All Rights Reserved.
  Includes slight modifications to addItemFromForm.
==============================================================================*/
if ((typeof Shopify) === 'undefined') { Shopify = {}; }

/*============================================================================
  Basic JS Helper Functions
==============================================================================*/
function cs_urlParams (name) {
  name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
  var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
  return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

/*============================================================================
  API Helper Functions
==============================================================================*/
function attributeToString(attribute) {
  if ((typeof attribute) !== 'string') {
    attribute += '';
    if (attribute === 'undefined') {
      attribute = '';
    }
  }
  return jQuery.trim(attribute);
};

/*============================================================================
  API Functions
  - Shopify.format money is defined in option_selection.js.
    If that file is not included, it is redefined here.
==============================================================================*/
if (!Shopify.formatMoney) {
  Shopify.formatMoney = function(cents, format) {
    var value = '',
        placeholderRegex = /\{\{\s*(\w+)\s*\}\}/,
        formatString = (format || this.money_format);

    if (typeof cents == 'string') {
      cents = cents.replace('.','');
    }

    function defaultOption(opt, def) {
      return (typeof opt == 'undefined' ? def : opt);
    }

    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal   = defaultOption(decimal, '.');

      if (isNaN(number) || number == null) {
        return 0;
      }

      number = (number/100.0).toFixed(precision);

      var parts   = number.split('.'),
          dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
          cents   = parts[1] ? (decimal + parts[1]) : '';

      return dollars + cents;
    }

    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }

    return formatString.replace(placeholderRegex, value);
  };
}

Shopify.onProduct = function(product) {
  // alert('Received everything we ever wanted to know about ' + product.title);
};

Shopify.onCartUpdate = function(cart) {
  // alert('There are now ' + cart.item_count + ' items in the cart.');
};
Shopify.onItemAdded = function(line_item) {
   // alert(line_item.title + ' was added to your shopping cart.');
};
Shopify.updateCartNote = function(note, callback) {
  var params = {
    type: 'POST',
    url: '/cart/update.js',
    data: 'note=' + attributeToString(note),
    dataType: 'json',
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      }
      else {
        Shopify.onCartUpdate(cart);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      Shopify.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};

Shopify.onError = function(XMLHttpRequest, textStatus) {
  var data = eval('(' + XMLHttpRequest.responseText + ')');
  if (!!data.message) {
    alert(data.message + '(' + data.status  + '): ' + data.description);
  } else {
    alert('Error : ' + Shopify.fullMessagesFromErrors(data).join('; ') + '.');
  }
};

/*============================================================================
  POST to cart/add.js returns the JSON of the line item associated with the added item
==============================================================================*/
Shopify.addItem = function(variant_id, quantity, callback) {
  var quantity = quantity || 1,
      params = {
    type: 'POST',
    url: '/cart/add.js',
    data: 'quantity=' + quantity + '&id=' + variant_id,
    dataType: 'json',
    success: function(line_item) {

      if ((typeof callback) === 'function') {
        callback(line_item);
      }
      else {
        Shopify.onItemAdded(line_item);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      Shopify.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};

/*============================================================================
  POST to cart/add.js returns the JSON of the line item
    - Allow use of form element instead of id
    - Allow custom error callback
==============================================================================*/
Shopify.addItemFromForm = function(form, callback, errorCallback) {
  var params = {
    type: 'POST',
    url: '/cart/add.js',
    data: jQuery(form).serialize(),
    dataType: 'json',
    success: function(line_item) {
  
      if ((typeof callback) === 'function') {
        callback(line_item, form);
      }
      else {
        Shopify.onItemAdded(line_item, form);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      if ((typeof errorCallback) === 'function') {
        errorCallback(XMLHttpRequest, textStatus);
      }
      else {
        Shopify.onError(XMLHttpRequest, textStatus);
      }
    }
  };
  jQuery.ajax(params);
};

// Get from cart.js returns the cart in JSON
Shopify.getCart = function(callback) {
  jQuery.getJSON('/cart.js', function (cart, textStatus) {
    if ((typeof callback) === 'function') {
      callback(cart);
    } else {
      Shopify.onCartUpdate(cart);
    }
    
  });
};

// GET products/<product-handle>.js returns the product in JSON
Shopify.getProduct = function(handle, callback) {
  jQuery.getJSON('/products/' + handle + '.js', function (product, textStatus) {
    if ((typeof callback) === 'function') {
      callback(product);
    } else {
      Shopify.onProduct(product);
    }
  });
};



// POST to cart/change.js returns the cart in JSON
Shopify.changeItem = function(variant_id, quantity, callback) {

  var params = {
    type: 'POST',
    url: '/cart/change.js',
    data:  'quantity='+quantity+'&id='+variant_id,
    dataType: 'json',
    564: false,
    beforeSend: function() {
      
      $(".cartForm_left_content").addClass("not-clickable");
    },
    success: function(cart) {
	  cartNewResponse = cart;

      $(".cartForm_left_content").addClass("not-clickable");

      if ((typeof callback) === 'function') {
        callback(cartNewResponse);
      } else {
        Shopify.onCartUpdate(cartNewResponse);
      }
    },
    error: function(XMLHttpRequest, textStatus) {

      Shopify.onError(XMLHttpRequest, textStatus);
    },
    complete: function(cart) {

      setTimeout(function(){
      	$(".cartForm_left_content").removeClass("not-clickable");
      },1000);
    }
  };
  jQuery.ajax(params);
};

/*============================================================================
  Ajaxify Shopify Add To Cart
==============================================================================*/
var ajaxifyShopify = (function(module, $) {

  'use strict';

  // Public functions
  var init;

  // Private general variables
  var settings, cartInit, $drawerHeight, $cssTransforms, $cssTransforms3d, $nojQueryLoad, $w, $body, $html;

  // Private plugin variables
  var $formContainer, $btnClass, $wrapperClass, $addToCart, $flipClose, $flipCart, $flipContainer, $cartCountSelector, $cartCostSelector, $toggleCartButton, $modal, $cartContainer, $drawerCaret, $modalContainer, $modalOverlay, $closeCart, $drawerContainer, $prependDrawerTo, $callbackData={};

  // Private functions
  var updateCountPrice, flipSetup, revertFlipButton, modalSetup, showModal, sizeModal, hideModal, drawerSetup, showDrawer, hideDrawer, sizeDrawer, loadCartImages, formOverride, itemAddedCallback, itemErrorCallback, cartUpdateCallback, cartToggleCallback, setToggleButtons, cs_openCart, flipCartUpdateCallback, buildCart, cartTemplate, adjustCart, adjustCartCallback, createQtySelectors, qtySelectors, validateQty, scrollTop, toggleCallback;

  /*============================================================================
    Initialise the plugin and define global options
  ==============================================================================*/
  init = function (options) {

    // Default settings
    settings = {
      method: 'modal', // Method options are drawer, modal, and flip. Default is drawer.
      formSelector: '.cartForm',
      addToCartSelector: 'input[type="submit"]',
      cartCountSelector: null,
      cartCostSelector: null,
      toggleCartButton: null,
      btnClass: null,
      wrapperClass: null,
      useCartTemplate: true,
      moneyFormat: '${{amount}}',
      disableAjaxCart: false,
      enableQtySelectors: true,
      prependDrawerTo: 'body',
      onToggleCallback: null
    };

    // Override defaults with arguments
    $.extend(settings, options);

    // If method parameter is set, override the defined method (used for demos)
    if (cs_urlParams('method')) {
      settings.method = cs_urlParams('method');
    }

    // Make sure method is lower case
    settings.method = settings.method.toLowerCase();

    // Select DOM elements
    $formContainer     = $(settings.formSelector);
    $btnClass          = settings.btnClass;
    $wrapperClass      = settings.wrapperClass;
    $addToCart         = $formContainer.find(settings.addToCartSelector);
    $flipContainer     = null;
    $flipClose         = null;
    $cartCountSelector = $(settings.cartCountSelector);
    $cartCostSelector  = $(settings.cartCostSelector);
    $toggleCartButton  = $(settings.toggleCartButton);
    $modal             = null;
    $prependDrawerTo   = $(settings.prependDrawerTo);

    // CSS Checks
    $cssTransforms   = Modernizr.csstransforms;
    $cssTransforms3d = Modernizr.csstransforms3d;

    // General Selectors
    $w    = $(window);
    $body = $('body');
    $html = $('html');

    // Check if we can use .load
    $nojQueryLoad = $html.hasClass('lt-ie9');
    if ($nojQueryLoad) {
      settings.useCartTemplate = false;
    }


    // Enable the ajax cart
    if (!settings.disableAjaxCart) {
      // Handle each case add to cart method
      switch (settings.method) {
        case 'flip':
          flipSetup();
          break;

        case 'modal':
          modalSetup();
          break;

        case 'drawer':
          drawerSetup();
          break;
      }

      // Escape key closes cart
      $(document).keyup(function (evt) {
        if (evt.keyCode == 27) {
          switch (settings.method) {
            case 'flip':
            case 'drawer':
              hideDrawer();
              break;
            case 'modal':
              hideModal();
              break;
          }
        }
      });

      if ($addToCart.length) {
        // Take over the add to cart form submit
        formOverride();
      }
    }

    // Run this function in case we're using the quantity selector outside of the cart
    adjustCart();
      
  };
  

  updateCountPrice = function (cart) {
    if ($cartCountSelector) {
      $cartCountSelector.html(cart.item_count).removeClass('hidden-count');

      if (cart.item_count === 0) {
        $cartCountSelector.addClass('hidden-count');
      }
    }
    if ($cartCostSelector) {
      $cartCostSelector.find('span.money').html(Shopify.formatMoney(cart.total_price, settings.moneyFormat));
      $cartCostSelector.removeClass('hidden-count');

      if (cart.item_count === 0) {
        $cartCostSelector.addClass('hidden-count');
      }
    }
  };

  flipSetup = function () {
    // Build and append the drawer in the DOM
    drawerSetup();

    // Stop if there is no add to cart button
    if (!$addToCart.length) {
      return;
    }

    // Wrap the add to cart button in a div
    $addToCart.addClass('flip__front').wrap('<div class="flip"></div>');

    // Write a (hidden) Checkout button, a loader, and the extra view cart button
    var checkoutBtn = $('<a href="/cart" class="flip__back" style="background-color: #C00; color: #fff;" class="flip__checkout">{{ 'cart.general.checkout' | t | json }} </a>').addClass($btnClass),
        flipLoader = $('<span class="ajaxcart__flip-loader"></span>'),
        flipExtra = $('<div class="flip__extra"><a href="#" class="flip__cart">{{ 'cart.general.view_cart' | t | json }} (<span></span>)</a></div>');

    // Append checkout button and loader
    checkoutBtn.insertAfter($addToCart);
    flipLoader.insertAfter(checkoutBtn);

    // Setup new selectors
    $flipContainer = $('.flip');

    if (!$cssTransforms3d) {
      $flipContainer.addClass('no-transforms');
    }

    // Setup extra selectors once appended
    flipExtra.insertAfter($flipContainer);
    $flipCart = $('.flip__cart');

    $flipCart.on('click', function(e) {
      e.preventDefault();
      showDrawer(true);
    });

    // Reset the button if a user changes a variation
    $('input[type="checkbox"], input[type="radio"], select', $formContainer).on('click', function() {
      revertFlipButton();
    });
  };

  revertFlipButton = function () {
    $flipContainer.removeClass('is-flipped');
  };

  modalSetup = function () {
    // Create modal DOM elements with handlebars.js template
    var source   = $("#ModalTemplate").html(),
        template = Handlebars.compile(source);

    // Append modal and overlay to body
    $body.append(template).append('<div class="ajaxcart__overlay"></div>');

    // Modal selectors
    $modalContainer = $('#AjaxifyModal');
    $modalOverlay   = $('.ajaxcart__overlay');
    $cartContainer  = $('#AjaxifyCart');

    // Close modal when clicking the overlay
    $modalOverlay.on('click', hideModal);

    // Create a close modal button
    $modalContainer.prepend('<button type="button" class="ajaxcart__close" title="' + {{ 'cart.general.close_cart' | t | json }} + '">' + {{ 'cart.general.close_cart' | t | json }} + '</button>');
    $closeCart = $('.ajaxcart__close');
    $closeCart.on('click', hideModal);

    // Add a class if CSS translate isn't available
    if (!$cssTransforms) {
      $modalContainer.addClass('no-transforms');
    }

    // Update modal position on screen changes
    $(window).on({
      orientationchange: function(e) {
        if ($modalContainer.hasClass('is-visible')) {
          sizeModal('resize');
        }
      }, resize: function(e) {
        // IE8 fires this when overflow on body is changed. Ignore IE8.
        if (!$nojQueryLoad && $modalContainer.hasClass('is-visible')) {
          sizeModal('resize');
        }
      }
    });

    // Toggle modal with cart button
    setToggleButtons();
  };

  showModal = function (toggle) {
    $body.addClass('ajaxcart--is-visible');
    // Build the cart if it isn't already there
    if (!cartInit && toggle) {
      Shopify.getCart(cartToggleCallback);
    } else {
      sizeModal();
    }
  };

  sizeModal = function(isResizing) {
    if (!isResizing) {
      $modalContainer.css('opacity', 0);
    }

    // Position modal by negative margin
    $modalContainer.css({
      'margin-left': - ($modalContainer.outerWidth() / 2),
      'opacity': 1
    });

    // Position close button relative to title
    $closeCart.css({
      'top': 30 + ($cartContainer.find('h1').height() / 2),
      'opacity':0
    });

    $modalContainer.addClass('is-visible');

    //scrollTop();

    toggleCallback({
      'is_visible': true
    });
  };

  hideModal = function (e) {
    $body.removeClass('ajaxcart--is-visible');
    if (e) {
      e.preventDefault();
    }

    if ($modalContainer) {
      $modalContainer.removeClass('is-visible');
      $body.removeClass('ajaxify-lock');
    }

    toggleCallback({
      'is_visible': false
    });
  };

  drawerSetup = function () {
    // Create drawer DOM elements with handlebars.js template
    var source   = $("#DrawerTemplate").html(),
        template = Handlebars.compile(source),
        data = {
          wrapperClass: $wrapperClass
        };

    // Append drawer (defaults to body)
    $prependDrawerTo.prepend(template(data));

    // Drawer selectors
    $drawerContainer = $('#AjaxifyDrawer');
    $cartContainer   = $('#AjaxifyCart');
    $drawerCaret     = $('.ajaxcart__caret > span');

    // Toggle drawer with cart button
    setToggleButtons();

    // Position caret and size drawer on resize if drawer is visible
    var timeout;
    $(window).resize(function() {
      clearTimeout(timeout);
      timeout = setTimeout(function(){
        if ($drawerContainer.hasClass('is-visible')) {
          positionCaret();
          sizeDrawer();
        }
      }, 500);
    });

    // Position the caret the first time
    positionCaret();

    // Position the caret
    function positionCaret() {
      if ($toggleCartButton.offset()) {
        // Get the position of the toggle button to align the caret with
        var togglePos = $toggleCartButton.offset(),
            toggleWidth = $toggleCartButton.outerWidth(),
            toggleMiddle = togglePos.left + toggleWidth/2;

        $drawerCaret.css('left', toggleMiddle + 'px');
      }
    }
  };

  showDrawer = function (toggle) {
    // If we're toggling with the flip method, use a special callback
    if (settings.method == 'flip') {
      Shopify.getCart(flipCartUpdateCallback);
    }
    // opening the drawer for the first time
    else if (!cartInit && toggle) {
      Shopify.getCart(cartUpdateCallback);
    }
    // simple toggle? just size it
    else if (cartInit && toggle) {
      sizeDrawer();
    }

    // Show the drawer
    $drawerContainer.addClass('is-visible');

    //scrollTop();

    toggleCallback({
      'is_visible': true
    });
  };

  hideDrawer = function () {
    $drawerContainer.removeAttr('style').removeClass('is-visible');
    //scrollTop();
    toggleCallback({
      'is_visible': false
    });
  };

  sizeDrawer = function ($empty) {
    if ($empty) {
      $drawerContainer.css('height', '0px');
    } else {
      $drawerHeight = $cartContainer.outerHeight();
      $('.cart__row img').css('width', 'auto'); // fix Chrome image size bug
      $drawerContainer.css('height',  $drawerHeight + 'px');
    }
  };

  loadCartImages = function () {
    // Size cart once all images are loaded
    var cartImages = $('img', $cartContainer),
        count = cartImages.length,
        index = 0;

    cartImages.on('load', function() {
      index++;

      if (index==count) {
        switch (settings.method) {
          case 'modal':
            sizeModal();
            break;
          case 'flip':
          case 'drawer':
            sizeDrawer();
            break;
        }
      }
    });
  };

  formOverride = function () {
    $formContainer.submit(function(e) {
      e.preventDefault();

      // Add class to be styled if desired
      $addToCart.removeClass('is-added').addClass('is-adding');

      // Remove any previous quantity errors
      $('.qty-error').remove();

      Shopify.addItemFromForm(e.target, itemAddedCallback, itemErrorCallback);

      // Set the flip button to a loading state
      switch (settings.method) {
        case 'flip':
          $flipContainer.addClass('flip--is-loading');
          break;
      }
    });
  };

  itemAddedCallback = function (product) {
    $addToCart.removeClass('is-adding').addClass('is-added');

    // Slight delay of flip to mimic a longer load
    switch (settings.method) {
      case 'flip':
        setTimeout(function () {
          $flipContainer.removeClass('flip--is-loading').addClass('is-flipped');
        }, 600);
        break;
    }
    Shopify.getCart(cartUpdateCallback);
  };

  itemErrorCallback = function (XMLHttpRequest, textStatus) {
    var data = eval('(' + XMLHttpRequest.responseText + ')');

    switch (settings.method) {
      case 'flip':
        $flipContainer.removeClass('flip--is-loading');
        break;
    }

    if (!!data.message) {
      if (data.status == 422) {
        $formContainer.after('<div class="errors qty-error">'+ data.description +'</div>')
      }
    }
  };

  cartUpdateCallback = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);

    switch (settings.method) {
      case 'flip':
        $('.flip__cart span').html(cart.item_count);
        break;
      case 'modal':
        if({{ settings.cart_show_on_click }}){
          buildCart(cart);
        }
        break;
      case 'drawer':
        buildCart(cart);
        if (!$drawerContainer.hasClass('is-visible')) {
          showDrawer();
        } else {
          scrollTop();
        }
        break;
    }
  };

  cartToggleCallback = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);

    switch (settings.method) {
      case 'flip':
        $('.flip__cart span').html(cart.item_count);
        break;
      case 'modal':
        buildCart(cart);
        break;
      case 'drawer':
        buildCart(cart);
        if (!$drawerContainer.hasClass('is-visible')) {
          showDrawer();
        } else {
          scrollTop();
        }
        break;
    }
  };

  setToggleButtons = function () {
    // Reselect the element in case it just loaded
    $toggleCartButton  = $(settings.toggleCartButton);

    if ($toggleCartButton) {
      // Turn it off by default, in case it's initialized twice
      $toggleCartButton.off('click');

      // Toggle the cart, based on the method
      $toggleCartButton.on('click', function(e) {
        if(window.location.href.indexOf("/cart") > -1) {
		  $('.global-loader').show();
        } else {
          e.preventDefault();
          Shopify.getCart(buildCart);
          return false;
        }
      });

    }
  };

  cs_openCart = function() {

    $(document).trigger('cart:toggle');
    switch (settings.method) {
      case 'modal':
        if ($modalContainer.hasClass('is-visible')) {
          hideModal();
        } else {
          showModal(true);
        }

        break;
      case 'drawer':
      case 'flip':
        if ($drawerContainer.hasClass('is-visible')) {
          hideDrawer();
        } else {
          showDrawer(true);
        }

        break;
    }
  };

  flipCartUpdateCallback = function (cart) {
    buildCart(cart);
  };

  buildCart = function (cart) {

    // Mark the cart as built
    cartInit = true;
    
    setTimeout(function(){
      	$('.product-tiles__list li.selected').click();
      affirm.ui.refresh();
    },2000);
    
    //Open Cart Slider
    if(!$(".ajaxcart--modal").hasClass("is-visible")){
      cs_openCart();
    }

    // Empty cart if using default layout or not using the .load method to get /cart
    if (!settings.useCartTemplate || cart.item_count === 0) {
      $cartContainer.empty();
    }

    // Show empty cart
    if(cart.item_count === 0) {

      cartTemplate(cart);

      switch (settings.method) {
        case 'modal':
          sizeModal('resize');
          break;
        case 'flip':
        case 'drawer':
          sizeDrawer();

          if (!$drawerContainer.hasClass('is-visible') && cartInit) {
            sizeDrawer(true);
          }

          break;
      }

      return;
    }

    
    // Use the /cart template, or Handlebars.js layout based on theme settings
    if (settings.useCartTemplate) {
      cartTemplate(cart);

      
      $(document).trigger('product:added');

      // Extend - refresh offer on build
      window.dispatchEvent(new Event('refreshAjaxSideCart'));
      // Extend - end Extend code
      return;
    }

    // Handlebars.js cart layout
    var items = [],
        item = {},
        data = {},
        source = $("#CartTemplate").html(),
        template = Handlebars.compile(source);

    // Add each item to our handlebars.js data
    $.each(cart.items, function(index, cartItem) {
      var itemAdd = cartItem.quantity + 1,
          itemMinus = cartItem.quantity - 1,
          itemQty = cartItem.quantity;

      /* Hack to get product image thumbnail
       *   - If image is not null
       *     - Remove file extension, add _small, and re-add extension
       *     - Create server relative link
       *   - A hard-coded url of no-image
      */

      if (cartItem.image != null){
        var prodImg = cartItem.image.replace(/(\.[^.]*)$/, "_small$1").replace('http:', '');
      } else {
        var prodImg = "//cdn.shopify.com/s/assets/admin/no-image-medium-cc9732cb976dd349a0df1d39816fbcc7.gif";
      }

      var prodName = cartItem.product_title,
          prodVariation = cartItem.variant_title;

      if (prodVariation == 'Default Title'){
	      prodVariation = false;
      }

      // Create item's data object and add to 'items' array
      item = {
        id: cartItem.variant_id,
        url: cartItem.url,
        img: prodImg,
        name: prodName,
        variation: prodVariation,
        itemAdd: itemAdd,
        itemMinus: itemMinus,
        itemQty: itemQty,
        price: Shopify.formatMoney(cartItem.price, settings.moneyFormat)
      };

      items.push(item);
    });

    // Gather all cart data and add to DOM
    data = {
      items: items,
      totalPrice: Shopify.formatMoney(cart.total_price, settings.moneyFormat),
      btnClass: $btnClass
    }

    $cartContainer.append(template(data));

    // With new elements we need to relink the adjust cart functions
    adjustCart();

    // Setup close modal button and size drawer
    switch (settings.method) {
      case 'modal':
        loadCartImages();
        break;
      case 'flip':
      case 'drawer':
        if (cart.item_count > 0) {
          loadCartImages();
        } else {
          sizeDrawer(true);
        }
        break;
      default:
        break;
    }
    
    $('#cartWrapper').removeClass('cart-remove-events');
    $('#cartWrapper .cart-checkout').removeClass('loading');

    $(document).trigger('product:added');
  };

  cartTemplate = function (cart) {
    if (cart.item_count === 0) {
    	var url = '/cart?' + Date.now() + ' div.cart__content__box';
      	//$('body').removeData('addonslide');
    }else{
    	var url = '/cart?' + Date.now() + ' #cartWrapper';  
    }  
    
    $cartContainer.load(url, function() {

      // With new elements we need to relink the adjust cart functions
      adjustCart();
      checkHeightonCart();
      

      $(".ajaxcart .addon-related").slick({
        dots: true,
        nextArrow: '<button type="button" data-role="none" class="slick-next slick-arrow" aria-label="Next" role="button" aria-disabled="false"><i class="mdi mdi-chevron-right"></i></button>',
        prevArrow: '<button type="button" data-role="none" class="slick-prev slick-arrow" aria-label="Previous" role="button" aria-disabled="false"><i class="mdi mdi-chevron-left"></i></button>',
        infinite: false,
        variableWidth: true,
        speed: 300,
        slidesToShow: 1,
        slidesToScroll: 1,
        responsive: [
          {
            breakpoint: 767,
            settings: {
              centerMode: true,
              centerPadding: '60px',
            }
          }
        ]
      }).show();
      
//       var goToSlide = $("body").data("addonslide");

//       if(goToSlide != undefined) {
//         goToSlide = Number(goToSlide) + 1;
//         $('.addon-related').slick('slickGoTo', goToSlide);
//       } else {
//         $('.addon-related').slick('slickGoTo', 0);
//       }

      // Size drawer at this point
      switch (settings.method) {
        case 'modal':
          loadCartImages();
          break;
        case 'flip':
        case 'drawer':
          if (cart.item_count > 0) {
            loadCartImages();
          } else {
            sizeDrawer(true);
          }
          // Create a close drawer button
          $cartContainer.prepend('<button type="button" class="ajaxcart__close" title="' + {{ 'cart.general.close_cart' | t | json }} + '">' + {{ 'cart.general.close_cart' | t | json }} + '</button>');
          $closeCart = $('.ajaxcart__close');
          $closeCart.on('click', hideDrawer);
          break;
        default:
          break;
      }

      // Mark the cart as built
      cartInit = true;
    });
  }

  adjustCart = function () {

    // This function runs on load, and when the cart is reprinted

    // Create ajax friendly quantity fields and remove links in the ajax cart
    if (settings.useCartTemplate) {
      createQtySelectors();
    }

    // Update quantify selectors
	var qtyAdjust = $('.ajaxcart__qty-adjust');

    // Add or remove from the quantity
    qtyAdjust.off('click');
    qtyAdjust.on('click', function() {
      var el = $(this),
          id = el.data('id'),
          qtySelector = el.siblings('.ajaxcart__qty-num'),
          qty = parseInt(qtySelector.val().replace(/\D/g, ''));

      var qty = validateQty(qty);

      // Add or subtract from the current quantity
      if (el.hasClass('ajaxcart__qty--plus')) {
        qty = qty + 1;
      } else {
        qty = qty - 1;
        if (qty <= 0) qty = 0;
      }

      qtySelector.val(qty).trigger('change');
    });

    // Remove quantify selectors
	var productRemovEl = $('.ajaxcart__remove');

    // Completely remove product
    productRemovEl.off('click');
    productRemovEl.on('click', function(e) {
      var el = $(this),
          id = el.data('id') || null,
          qty = 0,
          qtySelector = el.parents('.itemLoop').find('.ajaxcart__qty-num'),
          type = $(this).data('type').trim(),
          title = $(this).data('title').trim(),
          variant = $(this).data('variant').trim();

      qtySelector.val(qty).trigger('change');

      gtag('event', 'remove_from_cart', {"items": [{"id": id, "category": type, "name": title, "variant": variant}]});

      e.preventDefault();
    });

    // Update quantity based on input on change
    var qtyInput = $('.ajaxcart__qty-num');
    qtyInput.off('change');
    qtyInput.on('change', function() {
      
      if(updation_in_progress == true) {
        return false;
      } else {
        updation_in_progress = true;
      }

      var el = $(this),
          id = el.data('id'),
          qty = parseInt(el.val().replace(/\D/g, ''));

      var qty = validateQty(qty);
      var productIndex;
      var attachedIndex;
      var celliantID;

      $('#cartWrapper').addClass('cart-remove-events');
      $('#cartWrapper .cart-checkout').addClass('loading');
      
      var recycleProducts = [39775214567529, 39775213715561, 39775213551721, 39775216500841, 39775216762985, 39775217123433];

      jQuery.getJSON('/cart.js', function (cart, textStatus) {
        var cartItems = cart.items;
        var finalUpdation = {};

        for(var x = 0; x < cartItems.length; x++) {

          if(recycleProducts.indexOf(cartItems[x].id) > -1) {
            finalUpdation[cartItems[x].key] = 0;
          }
        }

        if(el.parents('.grid__item').hasClass('has-combo')) {
          
          var attachedID = el.parents('.grid__item').data('combo');

          for(var i = 0; i < cartItems.length; i++) {

            var hasFreeProperty = false;
            var hasFreeValue = 0;

            for (var property in cartItems[i].properties) {

              if(property == "_FREE") {
                hasFreeProperty = true;
              }

              if(property == "_combo") {
                hasFreeValue = cartItems[i].properties[property];
              }
            }

            if(hasFreeValue == attachedID && cartItems[i].variant_id == id && hasFreeProperty == false) {
              finalUpdation[cartItems[i].key] = qty;
              var product_old_count = cartItems[i].quantity;
              break;
            }
          }
          
          for(var j = 0; j < cartItems.length; j++) {

            var hasFreeProperty = false;

            for (var property in cartItems[j].properties) {
              if(property == "_FREE") {
                hasFreeProperty = true;
              }
            }

            if(cartItems[j].variant_id == attachedID && hasFreeProperty == true) {
              var attached_old_count = cartItems[j].quantity;

              if(Number(qty) > Number(product_old_count)) {
                var attached_new_count = Number(attached_old_count) + (Number(qty) - Number(product_old_count));
              } else {
                var attached_new_count = Number(attached_old_count) - (Number(product_old_count) - Number(qty));
              }
              
              finalUpdation[cartItems[j].key] = attached_new_count;

              break;
            }
          }
        } else {

          for(var i = 0; i < cartItems.length; i++) {

            var hasFreeProperty = false;

            for (var property in cartItems[i].properties) {

              if(property == "_FREE") {
                hasFreeProperty = true;
              }
            }

            if(cartItems[i].variant_id == id && hasFreeProperty == false) {
              finalUpdation[cartItems[i].key] = qty;
              var product_old_count = cartItems[i].quantity;
              break;
            }
          }
        }
        
        if(el.parents('.grid__item').hasClass('has-celliant')) {
          
          var celliantID = el.parents('.grid__item').data('celliant');

          for(var j = 0; j < cartItems.length; j++) {

            var hasCelliantProperty = false;

            for (var property in cartItems[j].properties) {

              if(property == "CELLIANT") {
                hasCelliantProperty = true;
              }
            }
            
            if(cartItems[j].variant_id == celliantID && hasCelliantProperty == true) {
              var attached_old_count = cartItems[j].quantity;

              if(Number(qty) > Number(product_old_count)) {
                var attached_new_count = Number(attached_old_count) + (Number(qty) - Number(product_old_count));
              } else {
                var attached_new_count = Number(attached_old_count) - (Number(product_old_count) - Number(qty));
              }
              
              finalUpdation[cartItems[j].key] = attached_new_count;

              break;
            }
          }
        }
        
        RC.cart.update({updates: finalUpdation}, function(cart) {
          adjustCartCallback(cart);
          updation_in_progress = false;
        });
      });
      
      return false;
    });

    function updateQuantity(id, qty) {
      // Add activity classes when changing cart quantities
      if (!settings.useCartTemplate) {
        var row = $('.ajaxcart__row[data-id="' + id + '"]').addClass('is-loading');
      } else {
        var row = $('.cart__row[data-id="' + id + '"]').addClass('is-loading');
      }

      if (qty === 0) {
        row.addClass('is-removed');
      }

      // Slight delay to make sure removed animation is done
      setTimeout(function() {
        Shopify.changeItem(id, qty, function(cart){
          var updatedItem = cart.items.filter(function(item){ return item.variant_id == id });
          if(qty == 0 || (updatedItem.length && updatedItem[0].quantity == qty))
            adjustCartCallback(cart);
          else
            jQuery('#ajaxcart__item__' + id + '__errors', $cartContainer).show().delay(5000).fadeOut();
        });
      }, 250);
    }

    // Save note anytime it's changed
    var noteArea = $('textarea[name="note"]');
    noteArea.off('change');
    noteArea.on('change', function() {
      var newNote = $(this).val();

      // Simply updating the cart note in case they don't click update/checkout
      Shopify.updateCartNote(newNote, function(cart) {});
    });

    // Update additional cart buttons
    if (window.Shopify && Shopify.StorefrontExpressButtons) {
      Shopify.StorefrontExpressButtons.initialize();
    }
    
	//Check Cart Slider Quantity
    $(".ajaxcart__qty .ajaxcart__qty-num").each(function(){
      var tempVal = $(this).val();
      if(tempVal <= 1){
          $(this).siblings(".ajaxcart__qty--minus").addClass("qty_num");
       }else{
          $(this).siblings(".ajaxcart__qty--minus").removeClass("qty_num");
       }
	});
    
    $(".itemLoop").each(function(){
        if($(this).hasClass("FreeItem")){
            $(".cart__body").append(this);
        }
    });    
  };

  adjustCartCallback = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);

    // Hide the modal or drawer if we're at 0 items
    if (cart.item_count === 0) {
      // Handle each add to cart method
      switch (settings.method) {
        case 'modal':
          break;
        case 'flip':
        case 'drawer':
          hideDrawer();
          break;
      }
    }

    // Reprint cart on short timeout so you don't see the content being removed
    setTimeout(function() {

      if(window.location.href.indexOf("/cart") > -1) {
        location.reload();
      } else {
      	Shopify.getCart(buildCart);
      }
    }, 150)
  };

  createQtySelectors = function() {
    // If there is a normal quantity number field in the ajax cart, replace it with our version
    if ($('input[type="number"]', $cartContainer).length) {
      $('input[type="number"]', $cartContainer).each(function() {
        var el = $(this),
            currentQty = el.val();

        var itemAdd = currentQty + 1,
            itemMinus = currentQty - 1,
            itemQty = currentQty;

        var source   = $("#AjaxifyQty").html(),
            template = Handlebars.compile(source),
            data = {
              id: el.data('id'),
              itemQty: itemQty,
              itemAdd: itemAdd,
              itemMinus: itemMinus
            };

        // Append new quantity selector then remove original
        el.after(template(data)).remove();
      });
    }

    // If there is a regular link to remove an item, add attributes needed to ajaxify it
    if ($('a[href^="/cart/change"]', $cartContainer).length) {
      $('a[href^="/cart/change"]', $cartContainer).each(function() {
        var el = $(this).addClass('ajaxcart__remove');
      });
    }
  };


  validateQty = function (qty) {
    // Make sure we have a valid integer
    if((parseFloat(qty) == parseInt(qty)) && !isNaN(qty)) {
      // We have a number!
    } else {
      // Not a number. Default to 1.
      qty = 1;
    }
    return qty;
  };

  scrollTop = function () {
    if ($body.scrollTop() > 0 || $html.scrollTop() > 0) {
      $('html, body').animate({
        scrollTop: 0
      }, 250, 'swing');
    }
  };

  toggleCallback = function (data) {
    // General data to send
    data.method = settings.method;

    // Run the callback if it's a function
    if (typeof settings.onToggleCallback == 'function') {
      settings.onToggleCallback.call(this, data);
    }
  };
//   function slickInital(){    
//   if(jQuery (window).width()<767){
//     if(!$('#AjaxifyCart ._product_slider_mob').hasClass('slick-slider')){
//       $('#AjaxifyCart ._product_slider_mob').slick();
// //       .slick({
// //         adaptiveHeight: true
// //       });
//     }      
//   } else{
// //     $('#AjaxifyCart ._product_slider_mob').slick('unslick');
// //     $('#AjaxifyCart ._product_slider_mob').slick('unslick');
  
//   } 	
// }
  
  $(document).on('click', '.atc__custom' , function(){
    var variant_id = $(this).closest('li').data('var-id');
    var quantity = 1;
    Shopify.addItem(variant_id, quantity);
    setTimeout(function(){
    	jQuery.getJSON('/cart.js', function (cart, textStatus) {
          if ((typeof callback) === 'function') {
            callback(cart);
          }
          else {
            buildCart(cart);        
            updateCountPrice(cart);
          }
        });
    }, 1000)
    
  });
  
  

  

  module = {
    init: init,
    buildCart: buildCart,
    updateCountPrice: updateCountPrice
  };

  return module;

}(ajaxifyShopify || {}, jQuery));

$(document).ready(function(){
  $(document).on('click', '._close_ajax_new', function(){
  	$('.ajaxcart__close').click();
  });
  
    $(document).on('change', '.__ajaxify_change_size', function(){
      var getvarid =$(this).find(':selected').data('id');
      $(this).closest('li').attr('data-var-id', getvarid);
      $(this).find("option").eq(0).remove();
      $(this).closest('li').find('.atc__custom').css('display', 'block');
    });
 
});
jQuery(window).on('resize', function(){  
//   	slickInital2();
  checkHeightonCart();
  });
//  function slickInital2(){    
//   if(jQuery (window).width()<767){
//     if(!$('#AjaxifyCart ._product_slider_mob').hasClass('slick-slider')){
//       $('#AjaxifyCart ._product_slider_mob').slick();
// //       .slick({
// //         adaptiveHeight: true
// //       });
//     }      
//   } else{
//     //$('#AjaxifyCart ._product_slider_mob').slick('unslick');
// //     $('#AjaxifyCart ._product_slider_mob').slick('unslick');
  
//   } 	
// }
function checkHeightonCart(){
  var getWindowH =jQuery(window).innerHeight()-130;   
  var getWindowwW = jQuery(window).innerWidth();
  var getemptyCartH = jQuery('.__empty_cart__wrappercontainer').innerHeight();
  var getInfoH = jQuery('._ajax_cart_help_content').innerHeight();
  var getCartBodyH = jQuery('.cart__body').innerHeight();
  var getCartFooterH = jQuery('.cart__footer').innerHeight();
  var needminH = (getCartBodyH+getCartFooterH+getInfoH+getemptyCartH);
  if(getWindowwW > 767){
    if(getWindowH < needminH ){
      jQuery('.cartForm_left_content').addClass('overflowCartContent');
    }else{
      jQuery('.cartForm_left_content').removeClass('overflowCartContent');
    }
  }
}

//code for discount in cart 

// function applyDiscount(code){
  
//  if(code=="sun50"){
//    	$("#disc_text").html('Discount <span style="font-size: 0.85714em;color: #1990c6;font-weight: 500;" class="applied-reduction-code__information uppercase">'+$(".field__input_cart")[0].value+'</span><span class="cart__subtotal-title uppercase" id="edit_btn">EDIT</span>');
//     $("#disc_val").html("- $ 50");
//     $("#discount-wrapper_cart").css("display","none"); 
    
//     var total_string = $("#total").html();
//     var totalVal = "$ "+String(total_string.split(" ")[1]-discountVal);
//     if($("#total").html().indexOf(",")!=-1){
//       	total_string = total_string.replace(",","");
//       	total_string = "$ "+String(total_string.split(" ")[1]-discountVal);
//       	totalVal = total_string.substr(0,3) + "," +total_string.substr(3);
//     }
//     $("#total").html(totalVal);
//     sessionStorage.setItem("discount_code", "sun50");
//     sessionStorage.setItem("discount_value", "50");
      
//   }else{
//    	$("#error_msg").css("display","block");
//   } 
// }

// var discountVal = 50;
// $(document).on('click',"#show_dis",function(){
//   event.preventDefault();
//   $("#show_dis_p").css("display","none");
//   $("#discount-wrapper_cart").css("display","block");
// });

// $(document).on('click',"#edit_btn",function(){
//   event.preventDefault();
//   $("#disc_text").html("");
//    $("#disc_val").html("");
//   $("#discount-wrapper_cart").css("display","block");
//    var total_string = $("#total").html();
//     var totalVal = "$ "+String(Number(total_string.split(" ")[1])+discountVal);
//     if($("#total").html().indexOf(",")!=-1){
//       	total_string = total_string.replace(",","");
//       	total_string = "$ "+String(Number(total_string.split(" ")[1])+discountVal);
//       	totalVal = total_string.substr(0,3) + "," +total_string.substr(3);
//     }
//     $("#total").html(totalVal);
//   	sessionStorage.removeItem("discount_code");
//     sessionStorage.removeItem("discount_value");
// });

// $(document).on('click',"#cart_discount",function(){
//   event.preventDefault();
//   applyDiscount($(".field__input_cart")[0].value);
  
// });


$(document).on('click',"#checkoutBtn",function(event){
	$(this).parents('.cart-checkout').addClass('loading');
});